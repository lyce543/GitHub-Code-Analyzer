from fastapi import APIRouter, Request
from fastapi.responses import JSONResponse, StreamingResponse
import os
import json
from pathlib import Path
import tempfile
import shutil

from .github_utils import download_repo
from .chat_utils import ask_ai
from .rag_utils import index_documents, get_answer_from_repo, get_answer_from_repo_streaming

router = APIRouter()

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
STATE_FILE = "repo_state.json"

def save_repo_state(repo_path: str, repo_url: str):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é —É —Ñ–∞–π–ª"""
    state = {
        "repo_path": repo_path,
        "repo_url": repo_url,
        "exists": os.path.exists(repo_path)
    }
    with open(STATE_FILE, 'w', encoding='utf-8') as f:
        json.dump(state, f)
    print(f"‚úÖ State saved: {state}")

def load_repo_state():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ç–∞–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é –∑ —Ñ–∞–π–ª—É"""
    try:
        if os.path.exists(STATE_FILE):
            with open(STATE_FILE, 'r', encoding='utf-8') as f:
                state = json.load(f)
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ø–∞–ø–∫–∞
                if state.get("repo_path") and os.path.exists(state["repo_path"]):
                    print(f"‚úÖ State loaded: {state}")
                    return state["repo_path"]
                else:
                    print(f"‚ùå Saved path doesn't exist: {state.get('repo_path')}")
        print("‚ùå No valid state found")
        return None
    except Exception as e:
        print(f"‚ùå Error loading state: {e}")
        return None

def clear_repo_state():
    """–û—á–∏—â–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω"""
    if os.path.exists(STATE_FILE):
        os.remove(STATE_FILE)
        print("üóëÔ∏è State cleared")

@router.post("/load_repo")
async def load_repo(req: Request):
    try:
        data = await req.json()
        repo_url = data.get("url")
        
        if not repo_url:
            return JSONResponse(status_code=400, content={"error": "Missing repository URL"})

        print(f"üîÑ Loading repository: {repo_url}")
        
        # –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω
        clear_repo_state()
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
        repo_path = download_repo(repo_url)
        
        print(f"‚úÖ Repository downloaded to: {repo_path}")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
        save_repo_state(repo_path, repo_url)

        # –ü–æ–±—É–¥–æ–≤–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏ (—ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è)
        print("üîÑ Starting indexing...")
        index_documents(repo_path)
        print("‚úÖ Indexing completed")

        return {"message": "Repository downloaded and indexed.", "path": repo_path}
        
    except Exception as e:
        print(f"‚ùå Error in load_repo: {str(e)}")
        clear_repo_state()
        return JSONResponse(status_code=500, content={"error": f"Loading failed: {str(e)}"})

@router.get("/get_repo_structure")
async def get_repo_structure():
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞–Ω –∑ —Ñ–∞–π–ª—É
    repo_path_global = load_repo_state()
    
    print(f"üîç Checking repo_path_global: {repo_path_global}")
    
    if not repo_path_global:
        print("‚ùå repo_path_global is None")
        return JSONResponse(status_code=400, content={"error": "No repository loaded - repo_path_global is None"})
    
    if not os.path.exists(repo_path_global):
        print(f"‚ùå Path does not exist: {repo_path_global}")
        clear_repo_state()  # –û—á–∏—â–∞—î–º–æ –Ω–µ—ñ—Å–Ω—É—é—á–∏–π —Å—Ç–∞–Ω
        return JSONResponse(status_code=400, content={"error": f"Repository path does not exist: {repo_path_global}"})
    
    try:
        files = []
        repo_path = Path(repo_path_global)
        print(f"üîç Scanning repository at: {repo_path}")
        
        # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑ —ó—Ö–Ω—ñ–º –≤–º—ñ—Å—Ç–æ–º
        for file_path in repo_path.rglob("*"):
            if file_path.is_file() and not file_path.name.startswith('.'):
                try:
                    # –í—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –≤—ñ–¥ –∫–æ—Ä–µ–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
                    relative_path = str(file_path.relative_to(repo_path))
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ–∞–π–ª–∏ .git —Ç–∞ —ñ–Ω—à—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ
                    if '.git' in relative_path or '__pycache__' in relative_path:
                        continue
                    
                    # –ß–∏—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏
                    if file_path.suffix.lower() in ['.py', '.js', '.html', '.css', '.md', '.txt', '.json', '.yml', '.yaml', '.xml', '.cfg', '.ini', '.env', '.gitignore', '.dockerfile', '']:
                        try:
                            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                                content = f.read()
                                # –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                                if len(content) > 50000:  # 50KB limit
                                    content = content[:50000] + "\n\n... (—Ñ–∞–π–ª –æ–±—Ä—ñ–∑–∞–Ω–æ, –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è)"
                        except Exception as read_error:
                            content = f"Error reading file: {str(read_error)}"
                    else:
                        content = f"Binary file ({file_path.suffix})"
                    
                    files.append({
                        "path": relative_path,
                        "content": content,
                        "size": len(content) if isinstance(content, str) else 0
                    })
                    
                except Exception as e:
                    print(f"‚ùå Error processing file {file_path}: {str(e)}")
                    continue
        
        print(f"‚úÖ Found {len(files)} files")
        return {"files": files}
        
    except Exception as e:
        print(f"‚ùå Exception in get_repo_structure: {str(e)}")
        return JSONResponse(status_code=500, content={"error": f"Failed to get repository structure: {str(e)}"})

@router.post("/chat")
async def chat_streaming(request: Request):
    try:
        data = await request.json()
        message = data.get("message") or data.get("question")
        if not message:
            return JSONResponse(status_code=400, content={"error": "Missing 'message' field"})

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π
        repo_path = load_repo_state()
        if not repo_path:
            return JSONResponse(status_code=400, content={"error": "No repository loaded. Please load a repository first."})

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç—Ä—ñ–º—ñ–Ω–≥–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é
        def generate_response():
            try:
                for chunk in get_answer_from_repo_streaming(message):
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–µ–Ω —à–º–∞—Ç–æ–∫ —è–∫ Server-Sent Event
                    yield f"data: {json.dumps({'chunk': chunk})}\n\n"
                # –°–∏–≥–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                yield f"data: {json.dumps({'done': True})}\n\n"
            except Exception as e:
                yield f"data: {json.dumps({'error': str(e)})}\n\n"

        return StreamingResponse(
            generate_response(),
            media_type="text/plain",
            headers={
                "Cache-Control": "no-cache",
                "Connection": "keep-alive",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "*",
            }
        )
        
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

# –ó–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∞—Ä–∏–π –µ–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
@router.post("/chat_simple")
async def chat_simple(request: Request):
    try:
        data = await request.json()
        message = data.get("message") or data.get("question")
        if not message:
            return JSONResponse(status_code=400, content={"error": "Missing 'message' field"})

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π
        repo_path = load_repo_state()
        if not repo_path:
            return JSONResponse(status_code=400, content={"error": "No repository loaded. Please load a repository first."})

        answer = get_answer_from_repo(message)
        return {"answer": answer}
        
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

# –ï–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è –¥–µ–±–∞–≥—É
@router.get("/debug/status")
async def debug_status():
    repo_path_global = load_repo_state()
    return {
        "repo_path_global": repo_path_global,
        "path_exists": os.path.exists(repo_path_global) if repo_path_global else False,
        "current_working_directory": os.getcwd(),
        "state_file_exists": os.path.exists(STATE_FILE)
    }

# –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –µ–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
@router.post("/clear_repo")
async def clear_repo():
    """–û—á–∏—â–∞—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —Ç–∞ —Å—Ç–∞–Ω"""
    try:
        repo_path = load_repo_state()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–∞–ø–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é —è–∫—â–æ —ñ—Å–Ω—É—î
        if repo_path and os.path.exists(repo_path):
            shutil.rmtree(repo_path)
            print(f"üóëÔ∏è Removed repository folder: {repo_path}")
        
        # –í–∏–¥–∞–ª—è—î–º–æ –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É
        if os.path.exists("vectorstore"):
            shutil.rmtree("vectorstore")
            print("üóëÔ∏è Removed vector store")
        
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        clear_repo_state()
        
        return {"message": "Repository cleared successfully"}
        
    except Exception as e:
        print(f"‚ùå Error clearing repository: {str(e)}")
        return JSONResponse(status_code=500, content={"error": f"Failed to clear repository: {str(e)}"})