import os
import shutil
import subprocess

def download_repo(repo_url: str) -> str:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –∑ GitHub —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ –Ω—å–æ–≥–æ
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é –∑ URL
        repo_name = repo_url.rstrip("/").split("/")[-1]
        if repo_name.endswith('.git'):
            repo_name = repo_name[:-4]
            
        repo_path = f"./repos/{repo_name}"
        
        print(f"üîÑ Downloading to: {repo_path}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É repos —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        os.makedirs("./repos", exist_ok=True)

        # –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á—É –ø–∞–ø–∫—É —è–∫—â–æ —î
        if os.path.exists(repo_path):
            print(f"üóëÔ∏è Removing existing directory: {repo_path}")
            shutil.rmtree(repo_path)

        # –ö–ª–æ–Ω—É—î–º–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π
        print(f"‚¨áÔ∏è Cloning repository from: {repo_url}")
        result = subprocess.run(
            ["git", "clone", repo_url, repo_path], 
            check=True, 
            capture_output=True, 
            text=True
        )
        
        print(f"‚úÖ Repository cloned successfully")
        print(f"üìÅ Repository path: {os.path.abspath(repo_path)}")
        
        return repo_path
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Git clone failed: {e}")
        print(f"Git stdout: {e.stdout}")
        print(f"Git stderr: {e.stderr}")
        raise Exception(f"Failed to clone repository: {e.stderr}")
    except Exception as e:
        print(f"‚ùå Error in download_repo: {str(e)}")
        raise